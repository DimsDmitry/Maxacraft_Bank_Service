# Maxacraft Bank (billing/accounts) Service

## Общий тезис

Необходим сервис для управления счетами пользователя на разных серверах, а так же общим счетом. По счетам необходимо
проводить транзакции (перевод, пополнение, оплата, комиссия) и привязывать их к будущим товарам.

В итоге этот сервис планируется как часть большой системы торговли между игроками и заработка внутриигровой валюты.
Так же планируется система найма других игроков за фиксированную разовую оплату или периодическую. И система займов
у других игроков под процент и фондовый рынок с акциями, но это сильно позже. Акции так же выступают товаром

Виды торговли планируются следующие:

- Аукцион
- Подарок
- Равноценный обмен (деньги на товар/товар на деньги)
- Кредитование
- Фондовый рынок

Типы транзакций:

- Перевод валюты (между счетами на серверах одного игрока или между игроками на одном сервере)
- Оплата товара
- Заморозка суммы (для аукциона)
- Пополнение счета (с счета другого игрока или за донат валюту в будущем)
- Получение оплаты товара
- Вознаграждение (за квест\задание или за работу на другого игрока)
- Взятие ссуды у игрока
- Получение процентов с ссуды, выданной другому игроку

## Для начала

Необходимо инициализировать сервер, в твоем случае на Python, лучше всего использовать Django, база данных желательно
использовать PostgreSQL

- Django + Django REST Framework- [https://habr.com/ru/articles/722054/](https://habr.com/ru/articles/722054/) и [https://habr.com/ru/companies/yandex_praktikum/articles/561696/](https://habr.com/ru/companies/yandex_praktikum/articles/561696/)
- ORM (Object-Relational Mapping, функционал для легкого доступа к базе данных) стоит использовать Django-ORM - [https://habr.com/ru/articles/503526/](https://habr.com/ru/articles/503526/)

Нужно установить `docker` и `docker-compose`

Для начала по пунктам нужно сделать следующее:

1. Создать локальный GIT репозиторий
2. Инициализировать Django python проект, установить необходимые пакеты, как минимум `Django ORM` (если не в комплекте), `Django REST Framework` и `django-environ` ([https://django-environ.readthedocs.io/en/latest/install.html](https://django-environ.readthedocs.io/en/latest/install.html))
3. Запустить базу данных, я могу помочь
4. Создать .env файлик и использовать django-environ для использования переменных окружения
5. Записать в .env файл необходимые данные для подключения базы данных
6. Подключить базу данных - [https://dev-gang.ru/article/zapusk-novogo-proekta-django-s-bazoi-dannyh-postgresql-cpt21qogeg/](https://dev-gang.ru/article/zapusk-novogo-proekta-django-s-bazoi-dannyh-postgresql-cpt21qogeg/) документация по поднятию проекта с Postgresql
7. Создать таблицу в базе для счетов пользователя с полями (документация по таблицам\моделям - [https://docs.djangoproject.com/en/4.2/topics/db/models/](https://docs.djangoproject.com/en/4.2/topics/db/models/)) и с именем `user-accounts`:
    1. id - тип uuid - пример как можно это описать [https://tech.serhatteker.com/post/2020-01/uuid-primary-key/](https://tech.serhatteker.com/post/2020-01/uuid-primary-key/) - уникальный идентификатор счета
    2. type - тип enum/varchar - описание типа счета, возможные значения `minecraft-server` и `web`
    3. serverId - тип string/varchar, опциональное поле - идентификатор сервера, к которому привязан счет
    4. userId - тип string/varchar - идентефикатор пользователя, который владеет этим счетом
    5. status - тип enum/varchar - статус счета, возможные значения `active` / `blocked` / `closed`
8. Создать таблицу в базе для транзакций по счету с полями и с именем `transactions`
    1. id - uuid
    2. accountId - foreign key uuid - идентефикатор счета пользователя
    3. trade_type - enum с возможными значениями `auction` / `gift` / `trade` / `credit` / `stock_market`
    4. transaction_type - enum с возможными значениями `inbound_transfer` / `outbound_transfer` / `freezing` / `refill` / `inbound_payment` / `outbound_payment` / `reward` / `credit_payment` / `credit_percentage` / `dividends` / `salary_inbound` / `salary_outbound`
    5. amount - double precision тип, или real, поле для хранения суммы транзакции
    6. status - enum с возможными значениями - `in_progress` / `completed` / `rejected` / `declined` / `refunded`
9. Сделать базовую авторизацию для запросов с другого сервера
    1. При каждом запросе должно проверяться наличие ключа в заголовке запроса, ключ это просто строка в заголовке с именем authorization, пример:
    `{ "authorization": "auth_key" }`
    2. Ключ должен сравниваться с ключом, который хранится на текущем сервере в переменных
    3. Если они не равны - ошибка
    4. если равны - запрос выполняется
10. Провести миграцию базы данных [https://docs.djangoproject.com/en/4.2/topics/migrations/](https://docs.djangoproject.com/en/4.2/topics/migrations/)
11. Для начала нужно сделать один запрос типа `POST` по пути `/create-account` , который принимает `body` с полями `userId` , `type` и `serverId` который будет передан если `type = minecraft-server`
12. Этот запрос создает запись в таблице user-accounts с переданными полями, статусом `active` и автосгенерированным id .


    Полезные ссылки по Django:

    - [https://docs.djangoproject.com/en/4.2/topics/db/queries/](https://docs.djangoproject.com/en/4.2/topics/db/queries/)
    - [https://docs.djangoproject.com/en/4.2/topics/db/models/](https://docs.djangoproject.com/en/4.2/topics/db/models/)
    - [https://docs.djangoproject.com/en/4.2/ref/models/instances/](https://docs.djangoproject.com/en/4.2/ref/models/instances/)
    - [https://docs.djangoproject.com/en/4.2/topics/migrations/](https://docs.djangoproject.com/en/4.2/topics/migrations/)